* Generate naga IR from Elysian IR
  
  DONE: Now generating complete IR, but needs a correctness pass

* Store current function definition in context to allow looking up input defs

  DONE: Now available as a parameter

* Read from correct function argument instead of always picking 0

  DONE: Fixed

* Type error on combine_context.left = combine_context.out when validation is enabled
  DONE: Fixed

* Correctness pass
  * Correct behavior for combine functions
    * Appears to be evaluating everything, then returning an out-of-date context
  * Improve IR
    * Merge consecutive Emit statements
    * Prevent unnecessary intermediary bindings
    * Prevent automatic zero-initialization
  * Respect naga arithmetic rules
    * Limited vector-float operations
      * ex. No Vec* / f32 allowed

  DONE: Now able to generate validation-passing IR with correct behaviour

* Investigate using named expressions to avoid autogenerated binding names
  
  SKIPPED: Named expressions have to be const

* Switch to an Interpreter-like approach of storing data in an intermediate context
  
  DONE: Implemented as NagaWriter

* Iteration pipeline
  * Visualization via bevy requires textual preprocessing to handle bind groups, builtins, etc.
  * Practical approach is probably to generate a WGSL / GLSL function,
    then feed that into a bevy Shader
  * Perhaps use shadertoy? Likely easier than rigging up the corresponding bevy machinery.
  * Eventually, create a small winit + wgpu viewer that renders to a full-screen quad

  DONE: Implemented via postprocessing in elysian-shadertoy module

===============================================================================================


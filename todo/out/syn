* Generate a module of shape functions that can be compiled into an application via build.rs
  
  DONE: IR can now be converted into a coherent rust module

* Integrate syn
  * Need to represent via tree of syn types rather than TokenTree

  DONE: syn is now the first-class means of generating rust code

* Integrate prettyplease
  * Useful for visualizing generated code, and as an output option

  DONE: prettyplease is used to format generated rust code

* Implement Hash for Elysian so shapes can be identified across build script and program
  
  DONE: Added manual Hash impls for types where derive is insufficient

* Finish autogenerated Into Struct implementation for context types
  * Should be able to generate the appropriate struct writes

  DONE: Implemented as From for both Struct and generated types

* Compatibility layer to bridge Interpreter and build.rs functionality
  * Need some sort of interface that unifies I / O
    * Params and return value in the case of functions
    * Initial context writes and final read in the case of Interpreter
  * Likely able to implement some trait on a known type in the generated module,
    use that to dispatch to the precompiled field function

  DONE: Implemented using linkme to aggregate static function registrations
        from generated code, and an additional evaluation layer
        that chooses between static and interpreted based on availability

* Create struct to hold static function registrations
  * Clearer semantics than tuple

  DONE: Implemented as StaticShape

* Fix parsing for infinite floats
  * Can't set a value to f32::consts::INFINITE via literal as-is

  SKIPPED: syn doesn't appear to support infinity, so switched to using MAX instead

* Move static_shapes functionality into its own crate

  DONE: Implemented as elysian-static crate

============================================================================================

* Stronger typing for emitted code
  * Currently able to bind properties with implicit types,
    which is a violation of strong typing semantics
  * To wit, binds need to emit type annotations to prevent this

* Clean up syn usage
  * Should be using parse_quote where possible to avoid boilerplate
  * Some cases unavoidable due to what appear to be bugs in parse_quote
    * ex. Struct expressions not outputting a , between the last member and terminating ..

* Fix casing warnings
  * Need to require camel-case identifiers, convert them as appropriate

* Fix mutability warnings
  * Need to include mutability info, or infer it somehow

* Avoid duplicating functions across shape modules
  * May be a better idea to put everything inside one module,
    use provided names to populate per-shape entrypoint functions

* More granularity for static function dispatch
  * Currently picking static / interpreted once for a given shape composition 
    * Should at minimum be able to dispatch to sub-functions from Combine
    * Ideally should be able to dispatch individual function calls inside each module
      * Potential for code sharing
